#!/bin/bash python3
# -*- encoding: utf-8 -*-
# pybash.py

'''Python-Bash compiler'''

import argparse
import os
import re
import PyInstaller.__main__


def main() -> int:
    '''Main transpiler code.'''

    parser = argparse.ArgumentParser()
    parser.add_argument('filename', type=str, help='The filepath or filename of the psh file that needs to be compiled.')
    parser.add_argument('--icon', type=str, required=False, help='An icon for the file, if compilation to an executable is desired.')
    parser.add_argument('--name', type=str, required=False, help='The filename of the output file.')
    parser.add_argument('--compile', action='store_true', help='Compile the transpiled Python file to an executable.')

    args = parser.parse_args()

    if args.icon is not None:
        if not os.path.isfile(args.icon):
            print('Usage: python-bash-compiler.py <.psh file> [--compile] [--icon ICON] [--name NAME]')
            return 1

    if not os.path.isfile(args.filename):
        print('Usage: python-bash-compiler.py <.psh file> [--compile] [--icon ICON] [--name NAME]')
        return 1

    with open(args.filename, 'r', encoding='utf-8') as uncompiled:
        lines = uncompiled.readlines()

    nfile = []

    for line in lines:
        nline = line
        if line.startswith('shell_var!'):
            match = re.search(r'shell_var!(.*?)!(.*)', nline)
            var_name = match.group(1)
            statement = match.group(2).strip('\n')

            for match in re.findall(r'\${(.*?)}', statement):
                statement.replace('$', '') # don't need the $ anymore because there is a f-string

            statement = statement.strip()

            if line.startswith(' '):
                spacecount = 0
                for char in line:
                    if char != ' ':
                        break
                    spacecount += 1
                spaces = spacecount*' '

                nline = f'{spaces}{var_name} = subprocess.check_output(f"{statement}", shell=True).decode("utf-8").strip("\\n")'
            else:
                nline = f'{var_name} = subprocess.check_output(f"{statement}", shell=True).decode("utf-8").strip("\\n")'

        if line.replace(' ', '').startswith('!'):

            if line.startswith(' '):
                spacecount = 0
                for char in line:
                    if char != ' ':
                        break
                    spacecount += 1
                spaces = spacecount*' '

            nline = nline.replace('!', '')
            nline = nline.strip('\n')
            nline = nline.strip()
            nline = nline.replace('$', '')
            nline = f'{spaces}subprocess.call(f"{nline}", shell=True)'

        nfile.append(nline + '\n')

    nfile.insert(0, 'import subprocess\n')
    nfile.insert(0, '# This file was auto-generated by the Python-Bash compiler.\n\n')

    if args.name is not None:
        with open(f'{args.name}.py', 'w', encoding='utf-8') as newfile:
            newfile.writelines(nfile)

        if args.compile:
            if args.icon is not None:
                PyInstaller.__main__.run([
                    f'{args.name}.py',
                    '--onefile',
                    '--console',
                    '--clean',
                    '--log-level WARN',
                    f'--icon {args.icon}'
                ])
            else:
                PyInstaller.__main__.run([
                    f'{args.name}.py',
                    '--onefile',
                    '--console',
                    '--clean',
                    '--log-level',
                    'WARN'
                ])
    else:
        with open('a.py', 'w', encoding='utf-8') as newfile:
            newfile.writelines(nfile)

        if args.compile:
            if args.icon is not None:
                PyInstaller.__main__.run([
                    'a.py',
                    '--onefile',
                    '--console',
                    '--clean',
                    '--log-level WARN',
                    f'--icon {args.icon}'
                ])
            else:
                PyInstaller.__main__.run([
                    'a.py',
                    '--onefile',
                    '--console',
                    '--clean',
                    '--log-level WARN'
                ])
    return 0


if __name__ == '__main__':
    main()

#!/bin/bash python3
# -*- encoding: utf-8 -*-
# pybash.py

'''Python-Bash compiler'''

import argparse
import os
import re
import PyInstaller.__main__


def shell_var(line: str) -> str:
    '''Parse and return the shell_var! line.'''
    match = re.search(r'shell_var!(.*?)!(.*)', line)
    var_name = match.group(1)
    statement = match.group(2).strip('\n')

    for match in re.findall(r'\${(.*?)}', statement):
        statement.replace('$', '')

    statement = statement.strip()

    if line.startswith(' '):
        spacecount = 0
        for char in line:
            if char != ' ':
                break
            spacecount += 1
        spaces = spacecount*' '

        return f'{spaces}{var_name} = subprocess.check_output(f"{statement}", shell=True).decode("utf-8").strip("\\n")'
    else:
        return f'{var_name} = subprocess.check_output(f"{statement}", shell=True).decode("utf-8").strip("\\n")'


def run_shell(line: str) -> str:
    '''Parse and return a shell ! line.'''
    spacecount = len(line) - len(line.lstrip())
    spaces = spacecount * ' '

    nline = line.replace('!', '')
    nline = nline.strip('\n')
    nline = nline.strip()
    nline = nline.replace('$', '')
    return f'{spaces}subprocess.call(f"{nline}", shell=True)'


def main() -> int:
    '''Main transpiler code.'''

    parser = argparse.ArgumentParser()
    parser.add_argument('filename', type=str, help='The filepath or filename of the psh file that needs to be compiled.')
    parser.add_argument('--icon', type=str, required=False, help='An icon for the file, if compilation to an executable is desired.')
    parser.add_argument('--name', type=str, required=False, help='The filename of the output file.')
    parser.add_argument('--compile', action='store_true', help='Compile the transpiled Python file to an executable.')

    args = parser.parse_args()

    if args.icon is not None:
        if not os.path.isfile(args.icon):
            print('Usage: python-bash-compiler.py <.psh file> [--compile] [--icon ICON] [--name NAME]')
            return 1

    if not os.path.isfile(args.filename):
        print('Usage: python-bash-compiler.py <.psh file> [--compile] [--icon ICON] [--name NAME]')
        return 1

    with open(args.filename, 'r', encoding='utf-8') as uncompiled:
        lines = uncompiled.readlines()

    nfile = []

    for line in lines:
        if line.replace(' ', '').startswith('shell_var!'):
            line = shell_var(line)

        if line.replace(' ', '').startswith('!'):
            line = run_shell(line)

        line = line.strip('\n')
        nfile.append(line + '\n')

    nfile.insert(0, 'import subprocess\n')
    nfile.insert(0, '# This file was auto-generated by the Python-Bash compiler.\n\n')

    if args.name is None:
        args.name = 'a'

    with open(f'{args.name}.py', 'w', encoding='utf-8') as newfile:
        newfile.writelines(nfile)

    if args.compile:
        if args.icon is not None:
            PyInstaller.__main__.run([
                f'{args.name}.py',
                '--onefile',
                '--console',
                '--clean',
                '--log-level WARN',
                f'--icon {args.icon}'
            ])
        else:
            PyInstaller.__main__.run([
                f'{args.name}.py',
                '--onefile',
                '--console',
                '--clean',
                '--log-level',
                'WARN'
            ])

    return 0


if __name__ == '__main__':
    main()
